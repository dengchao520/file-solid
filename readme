项目设计初衷：
想根据solid原则实现一个多文件传输的程序，主要目的是加深下对solid原则的理解，以及复习下IO的一些知识
实现了开始任务、暂停任务、查看任务列表、查看单个任务进度，可以用过在客户端和服务端的控制台，输入指令来控制任务的开始和结束


设计注意点：
①　服务端和客户端启动一个线程监听控制台输出，用于来控制是否暂停任务以及查询任务状态。
②　客户端服务端都可以：开始传输和暂停传输，设计一个任务状态类，通过状态类来获取任务状态，while(state)自旋的方式控制客户端和服务端的任务状态，为true的时候进入自旋状态，执行空状态体，模拟暂停。
③　查看传输进度：设计一个任务状态类，用来控制传输任务的进度查看以及任务状态的控制。
④　任务是并行的，并非串行，服务端每建立一个链接，启动一个线程处理传输任务，客户端使用控制台输入来进行传输任务的建立，每个任务都独立创建线程运行。
⑤　单个任务传输包含多个文件并非一个文件（客户端通过控制台输入告诉服务端要获取那个文件夹的内容，服务端返回整个文件夹的信息，比如C:/test1/）。
⑥　任务开始前服务端向客户端发送本次传输文件的数量、总的文件的大小、单个文件的大小以及文件名。


solid：
SRP	单一责任原则  一个对象和方法应该只负责自己应该做的时间，比如厨师就只负责做饭，服务员只负责上菜打扫，服务员不能又负责做饭也负责打扫上菜
OCP	开放封闭原则  实体或对象应该对扩展保持开放，但对修改保持关闭
LSP	里氏替换原则  子类可以替代父类
ISP	接口隔离原则 客户端不应被强迫依赖于其不使用的方法 ，
DIP	依赖倒置原则 高层次的类不应该依赖于低层次的类，两者都应该依赖于抽象接口。抽象接口不应依赖于具体实现，具体实现应该依赖于抽象接口

程序运行方式：
1、客户端：修改ClientConfig类里面的
   SAVE_PATH：接收到文件后保存的目录
   SERVICE_HOST：服务端地址
   SERVICE_PORT：服务端端口 。，
2、服务端：修改ServiceConfig类里面的
   SERVICE_PORT：服务端启动端口
3、启动服务端FileReceiveClient启动main方法
4、启动客户端FileSendService启动main方法
5、指令介绍
  客户端指令:
  create：
  stop: 暂停任务
  start:开始任务
  list：任务列表
  state: 单个任务进度
  服务端指令:
  stop: 暂停任务
  start:开始任务
  list：任务列表
  state: 单个任务进度
6、客户端输入create指令，控制台会让输入想从服务端获取文件的目录，输入目录后任务开始
7、客户端和服务端分别可用stop，start，list，state指令根据任务状态，不知道任务id可以先执行下list，看下全部的任务id
注意：传输的文件一定要放几个大点的的，最好1GB以上，不然传输太快，没来得及暂停就已经成功了

